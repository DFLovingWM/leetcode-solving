/**
 * 并查集
 * 
 * 时间：`O(N)`, 152ms
 */

#include <iostream>
#include <vector>
#include <unordered_set>
#include <unordered_map>
using namespace std;

class UnionFind {
public:
    UnionFind(int size) {
        for (int i = 0; i < size; ++i) {
            parent.push_back(i);
        }
        rank = vector<int>(size, 1);
    }

    void merge(int i, int j) {
        int ii = getRoot(i);
        int jj = getRoot(j);
        if (ii == jj) return;

        if (rank[ii] <= rank[jj]) {
            parent[ii] = jj;
            if (rank[ii] == rank[jj]) {
                ++rank[jj];
            }
        } else {
            parent[jj] = ii;
        }
    }

    int getRoot(int x) {
        if (parent[x] == x) return x;
        return parent[x] = getRoot(parent[x]); // 路径压缩
    }
    
private:
    vector<int> parent;
    vector<int> rank;
};

class Solution {
public:
    int minMalwareSpread(vector<vector<int>>& graph, vector<int>& dangers) {
        unordered_set<int> dangerSet(dangers.begin(), dangers.end());
        const int n = graph.size();

        // 构建并查集
        UnionFind uf(n);
        for (int i = 0; i < n; ++i) {
            for (int j = i + 1; j < n; ++j) {
                if (graph[i][j]) {
                    uf.merge(i, j);
                }
            }
        }

        // 收集连通分量
        unordered_map<int, int> root2NodeNum; // 根结点 => 连通分量结点数
        unordered_map<int, vector<int>> root2Dangers; // 根结点 => 连通分量的危险结点
        for (int i = 0; i < n; ++i) {
            int root = uf.getRoot(i);
            ++root2NodeNum[root];
            if (dangerSet.count(i)) {
                root2Dangers[root].push_back(i);
            }
        }

        // 关注只有1个危险结点的连通分量，求最大数量
        sort(dangers.begin(), dangers.end());
        int res = dangers[0], maxNum = -1;
        for (auto &p : root2Dangers) {
            int root = p.first;
            auto &compDangers = p.second;
            if (compDangers.size() == 1) {
                int d = compDangers[0];
                int num = root2NodeNum[root];
                if (num > maxNum || (num == maxNum && d < res)) {
                    res = d;
                    maxNum = num;
                }
            }
        }
        return res;
    }
};

// int main() {
//     vector<vector<int>> graph = {{1,0,0,0},{0,1,0,0},{0,0,1,1},{0,0,1,1}};
//     vector<int> dangers = {3,1};
//     cout << Solution().minMalwareSpread(graph, dangers) << endl;
//     return 0;
// }