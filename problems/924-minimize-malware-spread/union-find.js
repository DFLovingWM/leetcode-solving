/**
 * （无向图）找出只有1个病毒结点、并且总结点最多的连通分量
 */
var minMalwareSpread = function(graph, initial) {
  const n = graph.length
  const unionFind = new UnionFind(n)
  const size = Array.from({ length: n }, () => 1)
  
  for (let i = 0; i < n; ++i) {
    for (let j = i + 1; j < n; ++j) {
      if (graph[i][j] === 1) { // 若是连通的
        unionFind.union(i, j)
        ++size[unionFind.getRoot(j)]
      }
    }
  }

  initial = initial.slice().sort((a, b) => a - b) // 索引小的在前面
  const virusCount = new Map() // 连通分量顶点 => 病毒数
  for (const i of initial) {
    const ii = unionFind.getRoot(i)
    virusCount.set(ii, (virusCount.get(ii) || 0) + 1)
  }

  let res = -1
  let maxCount = 0
  for (let i = 0; i < initial.length; ++i) {
    const cur = initial[i]
    const curRoot = unionFind.getRoot(cur)
    if (virusCount.get(curRoot) === 1) { // 连通分量中的病毒数为1
      const count = size[unionFind.getRoot(cur)]
      if (count > maxCount) { // 并且总数最多
        maxCount = count
        res = cur
      }
    }
  }
  return res === -1 ? initial[0] : res
};

// 并查集
class UnionFind {
  constructor (length) {
    this.father = Array.from({ length }, (_, index) => index)
  }

  getRoot (x) {
    if (x === this.father[x]) return x
    return this.father[x] = this.getRoot(this.father[x])
  }

  union (x, y) {
    const xx = this.getRoot(x)
    const yy = this.getRoot(y)
    this.father[yy] = xx // 以左边为父亲
  }
}

[
  [[[1,0,0,0],[0,1,0,0],[0,0,1,1],[0,0,1,1]], [3,1]],
  // [[[1,1,0],[1,1,0],[0,0,1]], [0,1]],
  // [[[1,0,0],[0,1,0],[0,0,1]], [0,2]],
  // [[[1,1,1],[1,1,1],[1,1,1]], [1,2]],
  // [[[1,0,1,0],[0,1,0,0],[1,0,1,0],[0,0,0,1]], [1]],
  // [
  //   [
  //     [1,0,0,0,1,0,0,0,0,0],
  //     [0,1,1,0,0,0,0,0,0,0],
  //     [0,1,1,0,0,1,0,0,0,0],
  //     [0,0,0,1,0,0,0,0,0,0],
  //     [1,0,0,0,1,0,0,0,0,0],
  //     [0,0,1,0,0,1,0,0,0,0],
  //     [0,0,0,0,0,0,1,0,0,1],
  //     [0,0,0,0,0,0,0,1,0,0],
  //     [0,0,0,0,0,0,0,0,1,0],
  //     [0,0,0,0,0,0,1,0,0,1]],
  //   [1,3,0]
  // ],
  // [
  //   [
  //     [1,0,0,0,1,0,0,0,0,0],
  //     [0,1,1,0,0,0,0,0,0,0],
  //     [0,1,1,0,0,1,0,0,0,0],
  //     [0,0,0,1,0,0,0,0,0,0],
  //     [1,0,0,0,1,0,0,0,0,0],
  //     [0,0,1,0,0,1,0,0,0,0],
  //     [0,0,0,0,0,0,1,0,0,1],
  //     [0,0,0,0,0,0,0,1,0,0],
  //     [0,0,0,0,0,0,0,0,1,0],
  //     [0,0,0,0,0,0,1,0,0,1]],
  //   [1,3,0,5]
  // ],
].forEach(input => {
  console.log(minMalwareSpread(...input))
})